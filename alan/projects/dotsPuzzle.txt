<span style="font-size: 16px;">Evolve a Solution to the "Nine Dots Puzzle"</span><br />by Ted Kaehler<br /><br /><strong><span style="font-size: 14px;">The Nine Dots Puzzle </span></strong><br />

This is a wonderful puzzle that everyone should have a chance to solve by
themselves. The solution has an "ah ha" that is thrilling. As a teenager, this author has a vivid memory of being challenged to solve the Nine Dots Puzzle at a noisy
afterschool gathering of "smart kids". 
<br /><br /><img  alt="The image http://tinlizzie.org/ometa-js/alan/projects/three-dots.gif cannot be displayed, because it contains errors." src="http://tinlizzie.org/ometa-js/alan/projects/three-dots.gif" /><br /><p>The statement is simple: Draw nine dots in three rows of three, as shown here. 

Cover all nine dots by drawing four straight lines without lifting your pencil from the paper.
 Assume that the dots are
tiny points that do not have finite area. Go ahead and try the puzzle on paper
now. </p><p>

The solution of the nine dots problem has a little trick in it. If you get
stuck in one mode of thinking, and don't realize that there is another way, and
you can't solve the puzzle. For this reason, the nine dots puzzle is a 
prominent example in several books about creative thinking. 
One such book is <strong>Lateral Thinking: Creativity Step by Step</strong> by Edward de
Bono (Harper &amp; Row, 1970, pages 95-96). Solving the nine dots problem requires
one to challange one's assumptions about what form the solution can take. "At
first it seems easy and various attempts are made to link up the dots. Then it
is found that one always needs more than four [lines]." </p><p>

James L. Adams uses the same problem in <strong>Conceptual Blockbusting, A Guide to
Better Ideas</strong> (Addison-Wesley, 1974, pages 24-33). "The overtly strict
limits are a block in the mind of the solver. The widespread nature of this
block is what makes this puzzle classic." People in the audiences of Adams'
talks started submitting outlandish solutions that truly broke out of their
conceptual blocks. These include: </p><p>
</p><ul>






<li>"Lay the paper on the surface of the Earth. Circumnavigate the globe
twice plus a few inches, displacing a little each time so as to pass through the next
row on each curcuit." <p>
</p></li>
<li>Draw parallel lines through each row of dots. Extend two parallel
lines until they meet in a very narrow corner far away. <p>
</p></li>
<li>A ten year old girl wrote in to suggest using a very wide pen that covers
all nine dots with one stroke.
</li>
</ul>

We will forgo these "extremely creative" solutions to see if we can get
evolution to solve this puzzle in the normal way -- a way that is known to be
difficult for humans. We
simply want four line segments that cover all nine dots and that can be
drawn without lifting one's pencil from the page.<br /><br />Here are four segments that are attached.&nbsp; They were drawn without lifting the pen from the paper.&nbsp; Unfortunately, the dot in the center is not covered.&nbsp; So, this is not a solution.<br /><br /><img  alt="http://tinlizzie.org/ometa-js/alan/projects/not-a-solution.gif" src="http://tinlizzie.org/ometa-js/alan/projects/not-a-solution.gif" /><br /><br />Let's write a program to discover a legitimate solution via artificial evolution.<br /><br /><span style="font-size: 18px;">Encoding the Problem</span><br /><br />In order to get an evolution program to solve the problem, we must "represent 
the problem" inside the computer. 

<p>


</p>


Let's generalize a little to an arbitrary collection of dots, not lined up in a grid.&nbsp; <br /><br />A potential solution will be an array of points in the order they are traversed by the pen.&nbsp; We'll mark the corners also.&nbsp; Here are the coordinates of the dots:<br /><br />(0,2)&nbsp;&nbsp;&nbsp; (1,2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (2,2)<br />(0,1)&nbsp;&nbsp;&nbsp; (1,1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (2,1)<br />
(0,0)&nbsp;&nbsp;&nbsp; (1,0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (2,0)<br />
<br />In Javascript an array with those points would print out as:<br /><pre>[[0,2], [1,2], [2,2],<br /> [0,1], [1,1], [2,1],<br /> [0,0], [1,0], [2,0]]</pre>A potential solution consists of those same dots, but in a different order.&nbsp; We
want them to be in the order that lets four straight lines cross all
nine dots.<br />
<br />Let's add some markers that show the three places where the line turns.&nbsp; Here is the way we will represent this failed solution:<br /><br /><img  alt="The image http://tinlizzie.org/ometa-js/alan/projects/not-a-solution.gif cannot be displayed, because it contains errors." src="http://tinlizzie.org/ometa-js/alan/projects/not-a-solution.gif" /><br /><br /><pre>[[0,2], [1,2], [2,2], "turn",<br /> [2,1], [2,0], "turn",<br /> [1,0], [0,0], "turn",<br /> [0,1], [1,1]]</pre>You can see that the last point in the list, [1, 1], is the middle dot.&nbsp; It is in the fourth line segment, but it is not co-linear.&nbsp; This is an incorrect solution.<br /><br /><span style="font-size: 18px;">Giving a Gemone a Score</span><br /><br />
The array above is the genome of a solution to the nine dots puzzle.&nbsp;
We will evolve this genome until it scores very well in the areas that
make a legal solution.<br /><br />In order for an evolution algorithm to work, it is very important to be able to represent solutions that are incorrect.&nbsp; A progression of bad solutions will lead to a much better solution.&nbsp; For this to happen, we must allow our data structures to represent bad solutions.<br /><br />A program will find a score for each genome.&nbsp; There are several ways a solution can be flawed.&nbsp; Our program will need to notice each of these.<br /><br />We will need to detect when two line segments are parallel.&nbsp; These two successive segments are parallel, and deserve a bad score.&nbsp; <br /><pre>[[0,2], [1,2], [2,2], "turn", [2,1], [1,1], [0,1]
</pre>In the same way, a "T" intersection is not allowed.&nbsp; The turning point is in the middle of the first line segment.<br /><br /><pre>[[0,2], [1,2], [2,2], "turn", [1,1], [1,0]]
</pre>Another way a solution can be incorrect is for segments 1 and 3 to attach to the same end of segment 2.&nbsp; Our list of points has an order.&nbsp; We need to know where the next turning point is on a segment.&nbsp; For full credit, the next turning point must be on the same end of the previous segment as its last point.<br /><br /><img  alt="http://tinlizzie.org/ometa-js/alan/projects/attach-same-end2.gif" src="http://tinlizzie.org/ometa-js/alan/projects/attach-same-end2.gif" /><br /><pre>[[0,0], [0,1], "turn", [0,2], [1,2], [2,2], "turn", [1,1], [2,0]]
</pre>To detect all of these cases, we need to know the point of intersection of two line segments.&nbsp; In the array, we will replace 'turn' with an object that can compute and hold the intersection point.<br /><br />The next page has the code for finding the point of intersection of two lines.&nbsp; Of course, we'll find it by artificial evolution.&nbsp; <br /><br />Next: <a href="#dotsLinesMeet">Search for the Intersection of Two Lines</a><span><br /></span><a style="font-family: yui-tmp;" href="http://tinlizzie.org/ometa-js/alan/essays.html#dotsLinesMeet"></a>